{"name":"Scanndal","tagline":"Scanndal is a scala library, which enables software developers to scan the classpath for classes without loading them via a classloader.","body":"## Main design goal:\r\n**Having no transient maven dependencies, except the scala-library.**\r\n\r\nMost libraries of this kind utilize an opcode engineering library like\r\nasm, bcel or javaassist and any logging tool and other frameworks.\r\nThe most common case, I used classpath scanning was, when I wrote some\r\nkind of runners, which bring their own dependencies into the pool, so\r\nsolving version clashes became daily business.\r\n\r\nThe library is highly influenced by ronmamos reflections library at\r\ngooglecode (https://code.google.com/p/reflections/) and the apache bcel\r\nproject.\r\n\r\n## Purpose\r\nScanndal enables software developers to scan the classpath for classes without loading them. This can be necessary, if you have to look for all classes in your classpath, that match certain attributes.\r\n\r\nFor example, if you were writing a servlet container for the servlet api 3.1 and you need to find all classes, that are annotated with the @WebServlet annotation. If you would use the reflection api, you would have to load all classes in your classpath, before you could check if it is annotated or not. That would waste a lot of permgen space and all static parts in a class would be executed, which could lead to unwanted site effects.\r\nScanndal goes an other way and analyses the class file bytes to find your matches, so only the heap is littered and nothing is executed.\r\n\r\nThe example mentioned above would be implemented like that:\r\n```scala\r\n// results in a List[Class[HttpServlet]]\r\nval servlets = Scanndal(\"my.root.package\").scan\r\n   .filter(new ClassAnnotationFilter[WebServlet]())\r\n   .map(new ClassMapper[HttpServlet])\r\n   .toList\r\n```\r\n\r\n## Latest release\r\nScanndal is available in the maven central repository. For details see the README file","google":"UA-27363726-2","note":"Don't delete this file! It's used internally to help with page regeneration."}